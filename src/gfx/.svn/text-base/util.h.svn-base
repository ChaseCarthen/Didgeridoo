#pragma once

#include <GL/glew.h>
#include <stdexcept>
#include <math/Vector.h>

namespace gfx
{

inline void checkGLErrors(const char* tag = "")
{
	GLenum errorID = glGetError();

	if (errorID != GL_NO_ERROR)
	{
		const char *errorString = (const char*)gluErrorString(errorID);

		printf("GL error: %s\n", errorString);

		if (tag != NULL)
		{
			printf("tag: %s\n", tag);
		}

		throw std::runtime_error(errorString);
	}
}

inline void renderAxes()
{
	glBegin(GL_LINES);
		glColor3f(1, 0, 0); glVertex3f(0, 0, 0); glVertex3f(1, 0, 0);
		glColor3f(0, 1, 0); glVertex3f(0, 0, 0); glVertex3f(0, 1, 0);
		glColor3f(0, 0, 1); glVertex3f(0, 0, 0); glVertex3f(0, 0, 1);
	glEnd();
}

inline void renderCube (double size = 1.0)
{
	math::vec3d dimensions = math::vec3d(size, size, size);
	math::vec3d origin = math::vec3d(0, 0, 0) - dimensions * 0.5;
	math::vec3d corner = origin + dimensions;

	math::vec3d point0 = math::vec3d(origin[0], origin[1], origin[2], 1.0);
	math::vec3d point1 = math::vec3d(corner[0], origin[1], origin[2], 1.0);
	math::vec3d point2 = math::vec3d(origin[0], corner[1], origin[2], 1.0);
	math::vec3d point3 = math::vec3d(corner[0], corner[1], origin[2], 1.0);
	math::vec3d point4 = math::vec3d(origin[0], origin[1], corner[2], 1.0);
	math::vec3d point5 = math::vec3d(corner[0], origin[1], corner[2], 1.0);
	math::vec3d point6 = math::vec3d(origin[0], corner[1], corner[2], 1.0);
	math::vec3d point7 = math::vec3d(corner[0], corner[1], corner[2], 1.0);

	glDisable(GL_LIGHTING);
	//glDisable(GL_DEPTH_TEST);
	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	//glTranslatef(-size/2, -size/2, -size/2);
	glBegin(GL_QUADS);
	
	glVertex3dv(point4.v);
	glVertex3dv(point6.v);
	glVertex3dv(point2.v);
	glVertex3dv(point0.v);

	glVertex3dv(point1.v);
	glVertex3dv(point3.v);
	glVertex3dv(point7.v);
	glVertex3dv(point5.v);

	glVertex3dv(point4.v);
	glVertex3dv(point0.v);
	glVertex3dv(point1.v);
	glVertex3dv(point5.v);

	glVertex3dv(point6.v);
	glVertex3dv(point7.v);
	glVertex3dv(point3.v);
	glVertex3dv(point2.v);

	glVertex3dv(point0.v);
	glVertex3dv(point2.v);
	glVertex3dv(point3.v);
	glVertex3dv(point1.v);

	glVertex3dv(point5.v);
	glVertex3dv(point7.v);
	glVertex3dv(point6.v);
	glVertex3dv(point4.v);

	glEnd();
	glEnable(GL_LIGHTING);
	//glEnable(GL_DEPTH_TEST);

	glPopMatrix();
}

}
