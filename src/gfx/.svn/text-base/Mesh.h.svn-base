/*
   Filename : Mesh.h
   Author   : Cody White
   Version  : 1.1

   Purpose  : Class to define a triangle mesh. 

   Change List:

      - 12/21/2009  - Created (Cody White)
	  - 01/27/2010  - Templated the class (Cody White)
*/

#pragma once

#include "gfx/Triangle.h"
#include "math/Vector.h"
#include "gfx/VertexBuffer.h"
#include "gfx/Material.h"
#include <map>
#include <list>
#include <iostream>
#include <fstream>
#include <string>

namespace gfx
{

/**
  * Class to define a triangle mesh.
  */
template <class T>
class Mesh
{
	public:

		/**
		  * Default constructor.
		  */
		Mesh (void)
		{
			m_num_vertices = 0;
			m_use_normals = false;
			m_use_texture = false;
		}

		/** 
		  * Default destructor.
		  */
		~Mesh (void)
		{
			// Clear all internal lists.
			clearCPUData ();
		}

		/**
		  * Load a mesh from a filename, must be .obj.
		  * @param filename Path to the .obj file.
		  * @param create_vbo Flag to create a vbo after loading the file.
		  */
		bool load (const char *filename, bool create_vbo = false)
		{
			std::ifstream fin;
			std::string path = filename;
			path = path.substr (0, path.find_last_of ("/") + 1);

			// Open the input file.
			fin.open (filename);
			if (!fin)
			{
				std::cout << "Could not open .obj file: " << filename << std::endl;
				return false;
			}

			std::string input_line       = "";
			std::string current_material = "";

			// Read until the end of the file.
			while (fin >> input_line)
			{
				if (input_line[0] == '#')
				{
					char tmp [200];
					fin.getline (tmp, 200, '\n');
				}

				else if (input_line == "mtllib")
				{
					// Read in the material file.
					std::string material_filename = "";
					fin >> material_filename;
					material_filename = path + material_filename;

					std::ifstream mat_fin;
					mat_fin.open (material_filename.c_str ());
					if (!mat_fin)
					{
						std::cout << "Could not open material file: " << material_filename << std::endl;
						mat_fin.close ();
						fin.close ();
						return false;
					}

					gfx::Material material;
					std::string material_name;
					std::string material_line;

					while (mat_fin >> material_line)
					{
						if (material_line[0] == '#')
						{
							char tmp [200];
							mat_fin.getline (tmp, 200, '\n');
						}

						else if (material_line == "newmtl")
						{
							mat_fin >> material_name;
						}

						else if (material_line == "Ns")
						{
							mat_fin >> material.specular_exponent;
						}

						else if (material_line == "Ka")
						{
							mat_fin >> material.transmissive[0] >> material.transmissive [1] >> material.transmissive[2];
						}

						else if (material_line == "Kd")
						{
							mat_fin >> material.diffuse[0] >> material.diffuse[1] >> material.diffuse[2];
						}

						else if (material_line == "Ks")
						{
							mat_fin >> material.specular[0] >> material.specular[1] >> material.specular[2];
						}

						else if (material_line == "Ni")
						{
							mat_fin >> material.index_of_refraction;
						}

						else if (material_line == "d")
						{
							mat_fin >> material.alpha;
						}

						else if (material_line == "illum")
						{
							int dummy;
							mat_fin >> dummy;

							// This is the last entry per material, so add it to the
							// list of materials.
							material.name = material_name;
							m_materials[material_name] = material;
						}

						else
						{
							std::cout << "Unknown material type: " << material_line << std::endl;
							fin.close ();
							mat_fin.close ();
							return false;
						}
					}

					mat_fin.close ();
				}

				// Vertex
				else if (input_line == "v")
				{
					math::Vector <T, 3> vertex;
					fin >> vertex[0] >> vertex[1] >> vertex [2];
					m_vertices.push_back (vertex);
				}

				// Object name.
				else if (input_line == "o")
				{
					std::string name;
					fin >> name; // Ignore it.
				}

				// Vertex normal.
				else if (input_line == "vn")
				{
					math::Vector <T, 3> normal;
					fin >> normal[0] >> normal[1] >> normal[2];
					m_normals.push_back (normal);
					m_use_normals = true;
				}

				// Texture coordinate.
				else if (input_line == "vt")
				{
					math::Vector <T, 2> tex_coord;
					fin >> tex_coord[0] >> tex_coord[1];
					m_texture_coords.push_back (tex_coord);
					m_use_texture = true;
				}

				// This material is now used for all faces until told otherwise.
				else if (input_line == "usemtl")
				{
					fin >> current_material;
				}

				else if (input_line == "s")
				{
					std::string smooth;
					fin >> smooth; // ignore.
				}

				// Triangle (face)
				else if (input_line == "f")
				{
					int vertex_indices 	  [3];
					int normal_indices 	  [3];
					int tex_coord_indices [3];

					std::string line;
					for (int i = 0; i < 3; ++i)
					{
						fin >> line;

						if (m_use_normals && !m_use_texture)
						{
							size_t cut = line.find ("/");
							line[cut] = ' ';
							line[cut + 1] = ' ';
							sscanf (line.c_str (), "%d %d", &vertex_indices[i], &normal_indices[i]);
						}
						else if (!m_use_normals && m_use_texture)
						{
							size_t cut = line.find ("/");
							line[cut] = ' ';
							sscanf (line.c_str (), "%d %d", &vertex_indices[i], &tex_coord_indices[i]);
						}
						else if (!m_use_normals && !m_use_texture)
						{
							sscanf (line.c_str (), "%d", &vertex_indices[i]);
						}
						else if (m_use_normals && m_use_texture)
						{
							size_t cut = line.find ("/");
							line[cut] = ' ';
							cut = line.find ("/");
							line[cut] = ' ';
							sscanf (line.c_str (), "%d %d %d", &vertex_indices[i], &tex_coord_indices[i], &normal_indices[i]);
						}
					}

					// Build the triangle from these faces.
					gfx::Triangle<T> triangle;
					triangle.m_vertices[0] = m_vertices[vertex_indices[0] - 1];
					triangle.m_vertices[1] = m_vertices[vertex_indices[1] - 1];
					triangle.m_vertices[2] = m_vertices[vertex_indices[2] - 1];

					if (m_use_normals)
					{
						triangle.m_normals[0] = m_normals[normal_indices[0] - 1];
						triangle.m_normals[1] = m_normals[normal_indices[1] - 1];
						triangle.m_normals[2] = m_normals[normal_indices[2] - 1];
					}

					if (m_use_texture)
					{
						triangle.m_texture_coords[0] = m_texture_coords[tex_coord_indices[0] - 1];
						triangle.m_texture_coords[1] = m_texture_coords[tex_coord_indices[1] - 1];
						triangle.m_texture_coords[2] = m_texture_coords[tex_coord_indices[2] - 1];
					}
					
					triangle.m_material = &(m_materials[current_material]);
					m_triangles.push_back (triangle);
				}
			}

			fin.close ();

			std::cout << "Loaded " << m_triangles.size () << " triangles" << std::endl;
			std::cout << "Loaded " << m_normals.size () << " normals" << std::endl;
			std::cout << "Loaded " << m_vertices.size () << " vertices" << std::endl;
			std::cout << "Loaded " << m_texture_coords.size () << " texture coordinates" << std::endl;
			std::cout << "Loaded " << m_materials.size () << " materials" << std::endl;

			if (create_vbo)
			{
				createVBO ();
			}

			m_num_vertices = m_triangles.size () * 3;

			m_vertices.clear ();
			m_normals.clear ();
			m_texture_coords.clear ();

			return true;
		}

		/**
		  * Create an internal VBO used from rendering.
		  */
		void createVBO (void)
		{
			std::vector <RenderData> data;
			data.resize (m_triangles.size () * 3);
			int counter = 0;
			for (typename std::list <gfx::Triangle <T> >::iterator iter = m_triangles.begin (); iter != m_triangles.end (); ++iter)
			{
				for (size_t j = 0; j < 3; ++j)
				{
					data[counter].normal = iter->m_normals[j];
					data[counter].vertex = iter->m_vertices[j];
					data[counter++].texture = iter->m_texture_coords[j]; 
				}
			}

			m_vbo.load ((void *)&data[0], sizeof (RenderData) * m_triangles.size () * 3);
		}

		/**
		  * Render the mesh.
		  */
		void render (void) const
		{
			if (m_vbo.id () != 0)
			{
				// A VBO has been created for this mesh, so use it.
				m_vbo.bind ();
				glEnableClientState(GL_VERTEX_ARRAY);
				glEnableClientState(GL_NORMAL_ARRAY);	
				glEnableClientState (GL_TEXTURE_COORD_ARRAY);

				glVertexPointer (3, GL_FLOAT, sizeof (RenderData), (char *)NULL);
				glNormalPointer (GL_FLOAT, sizeof (RenderData), (char*)NULL + sizeof (math::vec3f));
				glTexCoordPointer (2, GL_FLOAT, sizeof (RenderData), (char *)NULL + (2 * sizeof (math::vec3f)));

				glDrawArrays (GL_TRIANGLES, 0, m_num_vertices);

				glDisableClientState(GL_VERTEX_ARRAY);
				glDisableClientState(GL_NORMAL_ARRAY);
				glDisableClientState (GL_TEXTURE_COORD_ARRAY);
				m_vbo.unbind ();

				return;
			}

			// Else render in immediate mode.

			glBegin (GL_TRIANGLES);
			for (typename std::list <gfx::Triangle <T> >::const_iterator iter = m_triangles.begin (); iter != m_triangles.end (); ++iter)
			{
				for (int j = 0; j < 3; ++j)
				{
					if (m_use_normals)
					{
						glNormal3f ((float)iter->m_normals[j].x (),
									(float)iter->m_normals[j].y (),
									(float)iter->m_normals[j].z ());
					}

					if (m_use_texture)
					{
						glTexCoord2f ((float)iter->m_texture_coords[j].x (),
									  (float)iter->m_texture_coords[j].y ());
					}

					glVertex3f ((float)iter->m_vertices[j].x (),
								(float)iter->m_vertices[j].y (),
								(float)iter->m_vertices[j].z ());
				}
			}
			glEnd ();		
		}

		/**
		  * Clear the triangle lists.  If a vbo has been created, the internal
		  * lists can be cleared if no triangle data is needed.
		  */
		void clearCPUData (void)
		{
			m_materials.clear ();
			m_triangles.clear ();
		}

		/**
		  * Get the beginning iterator to the triangle list.
		  */
		typename std::list <gfx::Triangle <T> >::iterator begin (void)
		{
			return m_triangles.begin ();
		}

		/**
		  * Get the end iterator to the triangle list.
		  */
		typename std::list <gfx::Triangle<T> >::iterator end (void)
		{
			return m_triangles.end ();
		}

		std::list <gfx::Triangle<T> > m_triangles; 			// Triangles created.

	private:

		// Member variables.
		std::map <std::string, Material> 	m_materials; 		// List of materials read from the file.
		std::vector <math::Vector <T, 3> >	m_vertices; 		// Vertices read from the file.
		std::vector <math::Vector <T, 3> >	m_normals;	 		// Normals read from the file.
		std::vector <math::Vector <T, 2> >	m_texture_coords;	// Texture coordinates of the mesh.
	    gfx::VertexBuffer 	 			 	m_vbo;		 		// Internal VBO for drawing.
		size_t							 	m_num_vertices;		// Number of vertices (/ 3 = number of triangles).
		bool							 	m_use_normals;		// Flag to determine if normals should be used or not;
		bool							 	m_use_texture;		// Flag to determine if tex coords should be used or not;

		struct RenderData
		{
			math::vec3f vertex;
			math::vec3f normal;
			math::vec2f texture;
		};

};

template <class T>
void load(Mesh<T> &mesh, const char* filename, bool create_vbo = false)
{
	if (!mesh.load(filename, create_vbo))
	{
		std::cout << "Error loading " << filename << std::endl;
	}
}

}
