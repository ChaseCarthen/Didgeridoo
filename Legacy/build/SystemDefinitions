#
# Selection of operating system and architecture
#

# This is a LINUX system
SYSTEM = LINUX
INCLUDEEXT = include
LIBEXT = lib

# This is a little-endian architecture
LITTLE_ENDIAN = 1234
BIG_ENDIAN    = 4321

#
# Selection of compiler suite
#

# Basic C++ compiler is g++
GNUC_BASEDIR = /usr/bin
BASECCOMP = $(GNUC_BASEDIR)/g++
COMPILERTYPE = g++-3

# Default C++ compiler is Visual G++
ifndef CCOMP
	CCOMP = g++
endif

# Default C compiler is gcc
ifndef PLAINCCOMP
	#PLAINCCOMP = $(GNUC_BASEDIR)/gcc
	PLAINCCOMP = g++
endif

# Define a pattern to generate the name of the dependency file generated by the compiler:
ifeq ($(COMPILERTYPE),g++)
  # gcc version 2.x creates dependency file with the same root name as
	# the source file in the current directory:
  DEPFILETEMPLATE = '$(*F).d'
endif
ifeq ($(COMPILERTYPE),g++-3)
  # gcc version 3.x creates dependency file with the same root name and
	# in the same directory as the created object file
  DEPFILETEMPLATE = '$(patsubst %.o,%.d,$@)'
endif

# Set up appropriate flags to compile for shared libraries
CSOFLAGS = -fPIC

# Use the appropriate tools to build static and dynamic shared libraries
MAKEA = $(BUILDROOT)/MakeStaticLibrary.$(COMPILERTYPE)
MAKESO = $(BUILDROOT)/MakeSharedLibrary.$(COMPILERTYPE)

# Configure if it is safe to sort the list of linked libraries passed to the linker:
# (Might not be safe on older systems, or when using static linking.)
ifndef STATIC_LINK
  SORT_LINKLIBFLAGS = true
endif

#
# Selection of project directory layout
#

# Set subdirectories where created stuff goes
OBJDIRBASE = .obj
DEPDIR = $(OBJDIRBASE)/dep
EXEDIR = .
LIBDIR = .

#
# Include list of supported packages
#

include $(BUILDROOT)/Packages

# Create initial values for parameters that can be overriden by project makefiles
CFLAGS = 
LINKFLAGS = 
EXTRACINCLUDEFLAGS = 
EXTRALINKDIRFLAGS = 
EXTRALINKLIBFLAGS = 
